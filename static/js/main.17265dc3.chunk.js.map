{"version":3,"sources":["Profile/style.module.scss","Img/Obama.jpg","Img/Hagrid.jpg","Img/Chipolino.jpg","history.tsx","Profile/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","history","createBrowserHistory","React","memo","props","className","style","profileBlock","photoBlock","alt","src","photo","name","App","to","exact","from","path","component","Chipolino","Hagrid","Obama","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,aAAe,4BAA4B,WAAa,4B,mBCD1ED,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,6LCI5BC,EAFCC,c,iBCmBDC,MAAMC,MAZL,SAACC,GACf,OACE,yBAAKC,UAAWC,IAAMC,cACpB,uCACA,yBAAKF,UAAWC,IAAME,YACpB,yBAAKC,IAAI,SAASC,IAAKN,EAAMO,SAE/B,4BAAKP,EAAMQ,U,mDCcFC,MApBf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,IAAD,CAAQL,QAASA,GACf,4BAAQK,UAAU,cACd,kBAAC,IAAD,CAAMS,GAAG,aAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,UAEJ,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIF,GAAG,cAC5B,kBAAC,IAAD,CAAOC,OAAK,EAACE,KAAK,YAAYC,UAAW,kBAAM,kBAAC,EAAD,CAASN,KAAK,YAAYD,MAAOQ,SAChF,kBAAC,IAAD,CAAOJ,OAAK,EAACE,KAAK,YAAYC,UAAW,kBAAM,kBAAC,EAAD,CAASN,KAAK,SAASD,MAAOS,SAC7E,kBAAC,IAAD,CAAOL,OAAK,EAACE,KAAK,YAAYC,UAAW,kBAAM,kBAAC,EAAD,CAASN,KAAK,QAAQD,MAAOU,aCX7DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17265dc3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"style_profileBlock__1CTfT\",\"photoBlock\":\"style_photoBlock__81xrl\"};","module.exports = __webpack_public_path__ + \"static/media/Obama.5e0d4faa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Hagrid.ec77c85c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Chipolino.e3fbc2ed.jpg\";","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import React from \"react\";\nimport style from \"./style.module.scss\";\n\n\ninterface Props {\n  name:string,\n  photo:string\n}\n\nconst Profile = (props:Props) => {\n  return (\n    <div className={style.profileBlock}>\n      <h2>Profile</h2>\n      <div className={style.photoBlock}>\n        <img alt=\"photos\" src={props.photo} />\n      </div>\n      <h1>{props.name}</h1>\n    </div>\n  );\n}\n\nexport default React.memo(Profile)","import React from 'react';\nimport './App.css';\nimport {Router,Link,Switch,Redirect,Route} from 'react-router-dom'\nimport history from \"./history\";\nimport Profile from './Profile';\nimport Obama from \"./Img/Obama.jpg\";\nimport Hagrid from \"./Img/Hagrid.jpg\";\nimport Chipolino from \"./Img/Chipolino.jpg\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <header className=\"App-header\">\n            <Link to=\"/profile1\">Chipolino</Link>\n            <Link to=\"/profile2\">Hagrid</Link>\n            <Link to=\"/profile3\">Obama</Link>\n        </header>\n        <Switch>\n\t\t\t\t\t<Redirect exact from='/' to='/profile1' />\n\t\t\t\t\t<Route exact path=\"/profile1\" component={() => <Profile name=\"Chipolino\" photo={Chipolino} />} />\n\t\t\t\t\t<Route exact path=\"/profile2\" component={() => <Profile name=\"Hagrid\" photo={Hagrid} />} />\n\t\t\t\t\t<Route exact path=\"/profile3\" component={() => <Profile name=\"Obama\" photo={Obama} />} />\n\t\t\t\t</Switch>\n      </Router>\n    </div>\n );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}